{"ast":null,"code":"export default class TweetService {\n  async getTweets(username) {\n    return username ? this.tweets.filter(tweet => tweet.username === username) : this.tweets;\n  }\n\n  async postTweet(text) {\n    const tweet = {\n      id: Date.now(),\n      createdAt: new Date(),\n      name: 'Ellie',\n      username: 'ellie',\n      text\n    };\n    this.tweets.push(tweet);\n    return tweet;\n  }\n\n  async deleteTweet(tweetId) {\n    this.tweets = this.tweets.filter(tweet => tweet.id !== tweetId);\n  }\n\n  async updateTweet(tweetId, text) {\n    const tweet = this.tweets.find(tweet => tweet.id === tweetId);\n\n    if (!tweet) {\n      throw new Error('tweet not found!');\n    }\n\n    tweet.text = text;\n    return tweet;\n  }\n\n}","map":{"version":3,"sources":["/Users/woo/projects/dwitter/client/src/service/tweet.js"],"names":["TweetService","getTweets","username","tweets","filter","tweet","postTweet","text","id","Date","now","createdAt","name","push","deleteTweet","tweetId","updateTweet","find","Error"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AACjB,QAATC,SAAS,CAACC,QAAD,EAAW;AACxB,WAAOA,QAAQ,GACX,KAAKC,MAAL,CAAYC,MAAZ,CAAoBC,KAAD,IAAWA,KAAK,CAACH,QAAN,KAAmBA,QAAjD,CADW,GAEX,KAAKC,MAFT;AAGD;;AAEc,QAATG,SAAS,CAACC,IAAD,EAAO;AACpB,UAAMF,KAAK,GAAG;AACZG,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EADQ;AAEZC,MAAAA,SAAS,EAAE,IAAIF,IAAJ,EAFC;AAGZG,MAAAA,IAAI,EAAE,OAHM;AAIZV,MAAAA,QAAQ,EAAE,OAJE;AAKZK,MAAAA;AALY,KAAd;AAOA,SAAKJ,MAAL,CAAYU,IAAZ,CAAiBR,KAAjB;AACA,WAAOA,KAAP;AACD;;AAEgB,QAAXS,WAAW,CAACC,OAAD,EAAU;AACzB,SAAKZ,MAAL,GAAc,KAAKA,MAAL,CAAYC,MAAZ,CAAoBC,KAAD,IAAWA,KAAK,CAACG,EAAN,KAAaO,OAA3C,CAAd;AACD;;AAEgB,QAAXC,WAAW,CAACD,OAAD,EAAUR,IAAV,EAAgB;AAC/B,UAAMF,KAAK,GAAG,KAAKF,MAAL,CAAYc,IAAZ,CAAkBZ,KAAD,IAAWA,KAAK,CAACG,EAAN,KAAaO,OAAzC,CAAd;;AACA,QAAI,CAACV,KAAL,EAAY;AACV,YAAM,IAAIa,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACDb,IAAAA,KAAK,CAACE,IAAN,GAAaA,IAAb;AACA,WAAOF,KAAP;AACD;;AA9B+B","sourcesContent":["export default class TweetService {\n  async getTweets(username) {\n    return username\n      ? this.tweets.filter((tweet) => tweet.username === username)\n      : this.tweets;\n  }\n\n  async postTweet(text) {\n    const tweet = {\n      id: Date.now(),\n      createdAt: new Date(),\n      name: 'Ellie',\n      username: 'ellie',\n      text,\n    };\n    this.tweets.push(tweet);\n    return tweet;\n  }\n\n  async deleteTweet(tweetId) {\n    this.tweets = this.tweets.filter((tweet) => tweet.id !== tweetId);\n  }\n\n  async updateTweet(tweetId, text) {\n    const tweet = this.tweets.find((tweet) => tweet.id === tweetId);\n    if (!tweet) {\n      throw new Error('tweet not found!');\n    }\n    tweet.text = text;\n    return tweet;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}